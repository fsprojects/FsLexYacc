%{
(* (c) Microsoft Corporation 2005-2008.  *)

open FsLexYacc.FsLex
open FsLexYacc.FsLex.AST

%}

%type <AST.Spec> spec
%token <string> STRING IDENT
%token <AST.Code> CODE
%token <char> CHAR
%token <string> UNICODE_CATEGORY
%token RULE PARSE LET  AND LPAREN RPAREN
%token EOF BAR DOT PLUS STAR QMARK EQUALS UNDERSCORE LBRACK RBRACK HAT DASH
%start spec
%left BAR
%left regexp_alt
%left regexp_seq
%nonassoc regexp_opt
%nonassoc regexp_plus regexp_star
%%

spec:
| codeopt Macros RULE Rules codeopt {
    { TopCode=$1;Macros=$2;Rules=$4;BottomCode=$5 }
}

ident:
| IDENT { $1, parseState.InputRange 1 }

codeopt:
| CODE { $1 }
| { "", parseState.ResultRange }

Macros:
| { [] }
| macro Macros {
    $1 :: $2
}

macro:
| LET ident EQUALS regexp {
    { Name = $2; Matcher = $4 }
}

Rules:
| rule AND Rules {
    $1 :: $3
}
| rule { [$1] }

rule:
| ident args EQUALS PARSE optbar clauses {
    { Name = $1; Arguments = $2; Clauses = $6 }
}

args:
|  { [] }
| ident args { $1 :: $2 }

optbar:
| { }
| BAR { }

clauses:
| clause BAR clauses {$1 :: $3 }
| clause { [$1] }

clause:
| regexp CODE { { Matcher = $1; Code = $2 } }

regexp:
| CHAR { Inp(Alphabet(EncodeChar $1))}
| UNICODE_CATEGORY { Inp(UnicodeCategory $1)}
| EOF { Inp(Alphabet(fun ctx -> Eof))}
| UNDERSCORE { Inp Any }
| STRING { Seq([ for n in 0 .. $1.Length - 1 -> Inp(Alphabet(EncodeChar $1.[n]))])}
| ident { Macro($1) }
| regexp regexp %prec regexp_seq  { Seq[$1;$2] }
| regexp PLUS %prec regexp_plus  { Seq[$1;Star $1] }
| regexp STAR %prec regexp_star  { Star $1 }
| regexp QMARK %prec regexp_opt  { Alt(fun ctx -> [Seq[];$1])}
| regexp BAR regexp %prec regexp_alt { Alt(fun ctx -> [$1;$3])}
| LPAREN regexp RPAREN  { $2 }
| LBRACK charset RBRACK   { Alt (fun ctx -> [ for c in ($2 ctx) -> Inp(Alphabet(fun ctx -> c)) ])}
| LBRACK HAT charset RBRACK   { Inp(NotCharSet(fun ctx -> $3 ctx))}

charset:
 | CHAR { fun ctx -> Set.singleton(EncodeChar $1 ctx)}
 | CHAR DASH CHAR { fun ctx -> Set.ofSeq [ for c in $1 .. $3 -> EncodeChar c ctx ]}
 | charset charset { fun ctx -> Set.union ($1 ctx) ($2 ctx)}


